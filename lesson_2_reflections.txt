What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository it creates a .git file which makes a directory a
Git repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

A repository is the the main directory in which all files for a project are stored.
The working directory is the directory in which you are currently working on.
The staging area is where files are added in order to be committed.

How can you use the staging area to make sure you have one commit per logical change?

The staging area helps you to compare files in it and files in the commit, thereby allowing you to check if commits are made per logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are useful for experimenting on features or creating a new version of the project that is not linearly logical to the master branch.

How do the diagrams help you visualize the branch structure?

Helps us easily understand the relationships between commits and branches, including unreachable commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together merges changes that were made to the node at which the branches diverged.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is convenient however there maybe conflits that need to be manually resolved lest a bug be introduced, which is resolved by manual merging.